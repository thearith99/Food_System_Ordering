datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

  model Product {
    id              Int               @id @default(autoincrement())
    name            String
    price           Float
    description     String
    image           String
    category        Category          @relation(fields: [categoryId], references: [id])
    categoryId      Int
    discounts       ProductDiscount[]
    branchProducts  BranchProduct[]
    orderDetails    OrderDetail[]
  }

  model Category {
    id        Int       @id @default(autoincrement())
    name      String
    image     String
    parent    Category?  @relation("ChildCategories", fields: [parentId], references: [id])
    parentId  Int?
    children    Category[] @relation("ChildCategories")
    products  Product[]
  }

  model ProductDiscount {
    id              Int          @id @default(autoincrement())
    product         Product      @relation(fields: [productId], references: [id])
    productId       Int
    discount        Discount     @relation(fields: [discountId], references: [id])
    discountId      Int
  }

  model Discount {
    id              Int          @id @default(autoincrement())
    branch          Branch       @relation(fields: [branchId], references: [id])
    branchId        Int
    amount          Float
    productDiscounts ProductDiscount[]
  }

  model Branch {
    id         Int       @id @default(autoincrement())
    name       String
    location   Location  @relation(fields: [locationId], references: [id])
    locationId Int
    discounts  Discount[]
    products   BranchProduct[]
  }

  model BranchProduct {
    id         Int       @id @default(autoincrement())
    price      Float
    status     String
    branch     Branch    @relation(fields: [branchId], references: [id])
    branchId   Int
    product    Product   @relation(fields: [productId], references: [id])
    productId  Int
  }

  model Location {
    id         Int       @id @default(autoincrement())
    markName   String
    lat        Float
    long       Float
    branches   Branch[]
    orders     Order[]
  }

  model OrderDetail {
    id            Int       @id @default(autoincrement())
    product       Product   @relation(fields: [productId], references: [id])
    productId     Int
    totalAmount   Float
    qty           Int
    order         Order     @relation(fields: [orderId], references: [id])
    orderId       Int
  }

  model Payment {
    id         Int      @id @default(autoincrement())
    order      Order    @relation(fields: [orderId], references: [id])
    orderId    Int
    type       String
    amount     Float
  }

  model Order {
    id            Int           @id @default(autoincrement())
    orderNumber   String
    location      Location      @relation(fields: [locationId], references: [id])
    locationId    Int
    createdAt     DateTime
    status        String
    orderDetails  OrderDetail[]
    updatedAt     DateTime
    user          User          @relation(fields: [userId], references: [id])
    userId        Int
    payments      Payment[]
  }

  model User {
    id        Int       @id @default(autoincrement())
    name      String
    email     String
    phone     String
    password  String
    orders    Order[]
  }

  model Role {
    id            Int            @id @default(autoincrement())
    name          String
    permissions  Permission[]
    rolePermissions RolePermission[]
  }

  model Permission {
    id            Int           @id @default(autoincrement())
    name          String
    roles        Role[]
    rolePermissions RolePermission[]
  }

  // Define many-to-many relationship between Role and Permission
  model RolePermission {
    id             Int       @id @default(autoincrement())
    role           Role      @relation(fields: [roleId], references: [id])
    roleId         Int
    permission     Permission @relation(fields: [permissionId], references: [id])
    permissionId   Int
  }
